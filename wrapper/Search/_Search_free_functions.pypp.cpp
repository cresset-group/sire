// This file has been generated by Py++.

// (C) Christopher Woods, GPL >= 2 License

#include "boost/python.hpp"
#include "_Search_free_functions.pypp.hpp"

namespace bp = boost::python;

#include "approx_equal.h"

#include <QDebug>

#include <QReadWriteLock>

#include "approx_equal.h"

#include "approx_equal.h"

#include <QDebug>

#include <QReadWriteLock>

#include "approx_equal.h"

#include "approx_equal.h"

#include <QDebug>

#include <QReadWriteLock>

#include "approx_equal.h"

void register_free_functions(){

    { //::SireSearch::approx_equal
    
        typedef bool ( *approx_equal_function_type )( double,double );
        approx_equal_function_type approx_equal_function_value( &::SireSearch::approx_equal );
        
        bp::def( 
            "approx_equal"
            , approx_equal_function_value
            , ( bp::arg("val0"), bp::arg("val1") )
            , "" );
    
    }

    { //::SireSearch::get_approx_epsilon
    
        typedef double ( *get_approx_epsilon_function_type )(  );
        get_approx_epsilon_function_type get_approx_epsilon_function_value( &::SireSearch::get_approx_epsilon );
        
        bp::def( 
            "get_approx_epsilon"
            , get_approx_epsilon_function_value
            , "" );
    
    }

    { //::SireSearch::set_approx_epsilon
    
        typedef void ( *set_approx_epsilon_function_type )( double );
        set_approx_epsilon_function_type set_approx_epsilon_function_value( &::SireSearch::set_approx_epsilon );
        
        bp::def( 
            "set_approx_epsilon"
            , set_approx_epsilon_function_value
            , ( bp::arg("eps") )
            , "" );
    
    }

}
